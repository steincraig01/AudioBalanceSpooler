unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, MMDevAPI, activex, Vcl.StdCtrls,
  strutils,
  Vcl.ExtCtrls, unit3, System.Notification, registry, Menus,
  IdBaseComponent, IdComponent, IdCustomTCPServer, IdTCPServer, IdContext,
  System.Math, IdCustomHTTPServer, IdHTTPServer, IdGlobal, IdHeaderList;

type
  TForm1 = class(TForm)
    VolumeMonitorTimer: TTimer;
    NotificationCenter1: TNotificationCenter;
    Server: TIdTCPServer;
    IdHTTPServer1: TIdHTTPServer;
    memHtml: TMemo;
    procedure ShowNotification;
    procedure FormCreate(Sender: TObject);
    procedure VolumeMonitorTimerTimer(Sender: TObject);
    procedure ServerConnect(AContext: TIdContext);
    procedure ServerExecute(AContext: TIdContext);
    procedure IdHTTPServer1CommandGet(AContext: TIdContext;
      ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
    procedure IdHTTPServer1CreatePostStream(AContext: TIdContext;
      AHeaders: TIdHeaderList; var VPostStream: TStream);
    procedure IdHTTPServer1DoneWithPostStream(AContext: TIdContext;
      ARequestInfo: TIdHTTPRequestInfo; var VCanFree: Boolean);

  private
    id1: Integer;
    procedure WMHotKey(var Msg: TWMHotKey); message WM_HOTKEY;
    { Private declarations }
  public
    endpointVolume: IAudioEndpointVolume;
    { Public declarations }
  end;

function GetCompName: string;

var
  Form1: TForm1;

implementation

{$R *.dfm}

// Trap Hotkey Messages
procedure TForm1.WMHotKey(var Msg: TWMHotKey);
begin
  if Msg.HotKey = id1 then
    // form4.Show;
    // ShowMessage('Ctrl + Alt + R pressed !');

end;

function write_maxvolume(maxvolume: string): BOOL;
begin
  try
    begin
      if not(maxvolume = '') then
      begin
        with TRegistry.Create do
          try
            RootKey := HKEY_CURRENT_USER;
            OpenKey('\Software\SoundDriver', True);
            WriteString('MaxVolume', maxvolume);
          finally
            CloseKey;
            Free;
          end;
        Result := True;
      end
      else
      begin
        Result := False;
      end;
    end;
  except
    Result := False;
  end;
end;

function write_adjustvolume(adjustvolume: string): BOOL;
begin
  try
    begin
      if not(adjustvolume = '') then
      begin
        with TRegistry.Create do
          try
            RootKey := HKEY_CURRENT_USER;
            OpenKey('\Software\SoundDriver', True);
            WriteString('AdjVolume', adjustvolume);
          finally
            CloseKey;
            Free;
          end;
        Result := True;
      end
      else
      begin
        Result := False;
      end;
    end;
  except
    Result := False;
  end;
end;

function GetCompName: string;
var
  dwLength: dword;
begin
  dwLength := 253;
  SetLength(result, dwLength+1);
  if not GetComputerName(pchar(result), dwLength) then
    raise exception.create('Computer name not detected');
  result := pchar(result);
end;

function isfirstrun: BOOL;
var
  reg: TRegistry;
begin
  with TRegistry.Create do
    try
      RootKey := HKEY_CURRENT_USER;
      // OpenKey('\Software\SoundDriver', True);
      if not KeyExists('\Software\SoundDriver') then
      begin
        Result := True;
      end
      else
      begin
        Result := False;
      end;
    finally
      Free;
    end;
end;

function read_maxvolume: String;
var
  reg: TRegistry;
begin
  with TRegistry.Create do
    try
      RootKey := HKEY_CURRENT_USER;
      OpenKey('\Software\SoundDriver', True);
      if ValueExists('MaxVolume') then
      begin

        Result := ReadString('MaxVolume');
      end
      else
      begin
        Result := '0.00';
      end;
    finally
      Free;
    end;
end;

function read_adjustvolume: String;
var
  reg: TRegistry;
begin
  with TRegistry.Create do
    try
      RootKey := HKEY_CURRENT_USER;
      OpenKey('\Software\SoundDriver', True);
      if ValueExists('AdjVolume') then
      begin

        Result := ReadString('AdjVolume');
      end
      else
      begin
        Result := '0.00';
      end;
    finally
      Free;
    end;
end;

function add_startup(name, filename: string): BOOL;
begin
  try
    begin
      if (FileExists(filename)) and not(name = '') then
      begin
        filename := StringReplace(filename, '/', '\',
          [rfReplaceAll, rfIgnoreCase]);
        with TRegistry.Create do
          try
            RootKey := HKEY_CURRENT_USER;
            OpenKey('\Software\Microsoft\Windows\CurrentVersion\Run', True);
            WriteString(name, filename);
          finally
            CloseKey;
            Free;
          end;
        Result := True;
      end
      else
      begin
        Result := False;
      end;
    end;
  except
    Result := False;
  end;
end;

function delete_startup(filename: string): BOOL;
begin
  if not(filename = '') then
  begin
    try
      begin
        with TRegistry.Create do
          try
            RootKey := HKEY_LOCAL_MACHINE;
            OpenKey('\SOFTWARE\Microsoft\Windows\CurrentVersion\Run', True);
            DeleteValue(filename);
          finally
            CloseKey;
            Free;
          end;
        Result := True;
      end;
    except
      Result := False;
    end;
  end
  else
  begin
    Result := False;
  end;
end;

function prepare_html: String;
var
  HtmlStrings, NewHtmlStrings: TStringList;
  VolumeStr: String;
  CurrentVolume: single;
begin
  Form1.endpointVolume.GetMasterVolumeLevelScaler(CurrentVolume);
  VolumeStr := formatfloat('0.00', CurrentVolume);
  HtmlStrings := TStringList.Create;
  NewHtmlStrings := TStringList.Create;
  HtmlStrings.AddStrings(Form1.memHtml.Lines);
  NewHtmlStrings.Text := StringReplace(HtmlStrings.Text, 'ReplaceMaxVol',
    read_maxvolume, [rfReplaceAll]);
  NewHtmlStrings.Text := StringReplace(NewHtmlStrings.Text, 'ReplaceSysVol',
    VolumeStr, [rfReplaceAll]);
  NewHtmlStrings.Text := StringReplace(NewHtmlStrings.Text, 'ReplaceAdjVol',
    read_adjustvolume, [rfReplaceAll]);
  NewHtmlStrings.Text := StringReplace(NewHtmlStrings.Text, 'BUNTICE',
    GetCompName, [rfReplaceAll]);
  Result := NewHtmlStrings.Text;
end;


procedure TForm1.IdHTTPServer1CommandGet(AContext: TIdContext;
  ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
var
  AForm: TStringList;
  Stream: TStream;
  Key, Value, S: string;

begin
  if ARequestInfo.Command = 'POST' then
  begin
    //showmessage(GetCompName);
    Stream := ARequestInfo.PostStream;
    if assigned(Stream) then
    begin
      Stream.Position := 0;
      S := ReadStringFromStream(Stream);
    end;
    showmessage(ARequestInfo.FormParams);
    key := copy(ARequestInfo.FormParams, 1, ansipos('=', ARequestInfo.FormParams) - 1);
    Value := copy(ARequestInfo.FormParams, ansipos('=', ARequestInfo.FormParams) + 1, length(ARequestInfo.FormParams));
    showmessage(key);
    showmessage(value);
    AResponseInfo.ContentText := prepare_html;
  end
  else
  begin
      AResponseInfo.ContentText := prepare_html;

  end
end;

procedure TForm1.IdHTTPServer1CreatePostStream(AContext: TIdContext;
  AHeaders: TIdHeaderList; var VPostStream: TStream);
begin
  VPostStream := TMemoryStream.Create;
end;

procedure TForm1.IdHTTPServer1DoneWithPostStream(AContext: TIdContext;
  ARequestInfo: TIdHTTPRequestInfo; var VCanFree: Boolean);
begin
  VCanFree := False;
end;

procedure TForm1.ServerConnect(AContext: TIdContext);
begin
  // showmessage('Client Connected '+ acontext.Binding.PeerIP);
  AContext.Connection.IOHandler.WriteLn('Connected to SoundDriver');
  AContext.Connection.IOHandler.WriteLn('------------------------');
  AContext.Connection.IOHandler.WriteLn('Commands:');
  AContext.Connection.IOHandler.WriteLn('getvol - Get current system volume');
  AContext.Connection.IOHandler.WriteLn
    ('setvol 00-99 - Set system volume to value 00-99 ');
  AContext.Connection.IOHandler.WriteLn('getmax - Get volume threshold value');
  AContext.Connection.IOHandler.WriteLn
    ('setmax 00-99 - Set volume threshold value');
  AContext.Connection.IOHandler.WriteLn('getreset - Get volume reset value');
  AContext.Connection.IOHandler.WriteLn
    ('setreset 00-99 - Set volume reset value to 00-99');
  AContext.Connection.IOHandler.WriteLn('stop - Stop volume monitor');
  AContext.Connection.IOHandler.WriteLn('start - Start volume monitor');
  AContext.Connection.IOHandler.WriteLn(' ');
  AContext.Connection.IOHandler.WriteLn(' ');
end;

procedure TForm1.ServerExecute(AContext: TIdContext);
var
  ClientMsg: String;
  VolumeStr: String;
  NewVolume: single;
  CurrentVolume: single;
begin
  // stop timer while executing server commands?
  // VolumeMonitorTimer.Enabled := false;
  ClientMsg := AContext.Connection.IOHandler.ReadLn;
  // showmessage(ClientMsg);
  if ClientMsg = 'getvol' then
  begin
    endpointVolume.GetMasterVolumeLevelScaler(CurrentVolume);
    VolumeStr := formatfloat('0.00', CurrentVolume);
    // VolumeStr := copy(VolumeStr, 3, length(VolumeStr));
    AContext.Connection.IOHandler.WriteLn('Current system volume is ' +
      VolumeStr);
  end
  else if ContainsText(ClientMsg, 'setvol') then
  begin
    VolumeStr := '0.' + trim(copy(ClientMsg, length(ClientMsg) - 2,
      length(ClientMsg)));
    endpointVolume.SetMasterVolumeLevelScalar(strtofloat(VolumeStr), nil);
    AContext.Connection.IOHandler.WriteLn('System volume set to ' + VolumeStr);
  end
  Else if ClientMsg = 'getmax' then
  begin
    VolumeStr := read_maxvolume;
    AContext.Connection.IOHandler.WriteLn('Maximum volume threshold is ' +
      VolumeStr);
  end
  Else if ContainsText(ClientMsg, 'setmax') then
  begin
    VolumeStr := '0.' + trim(copy(ClientMsg, length(ClientMsg) - 2,
      length(ClientMsg)));
    write_maxvolume(VolumeStr);
    AContext.Connection.IOHandler.WriteLn('Maximum volume threshold set to ' +
      VolumeStr);
  end
  Else if ClientMsg = 'getreset' then
  begin
    VolumeStr := read_adjustvolume;
    AContext.Connection.IOHandler.WriteLn('Volume reset value is ' + VolumeStr);
  end
  Else if ContainsText(ClientMsg, 'setreset') then
  begin
    VolumeStr := '0.' + trim(copy(ClientMsg, length(ClientMsg) - 2,
      length(ClientMsg)));
    write_adjustvolume(VolumeStr);
    AContext.Connection.IOHandler.WriteLn('Volume reset value set to ' +
      VolumeStr);
  end;
  // VolumeMonitorTimer.Enabled:= true;
  // AContext.Connection.IOHandler.WriteLn('The command '+'"'+ClientMsg+'"'+' is not recognised!');
end;

procedure TForm1.ShowNotification;
var
  MyNotification: TNotification;
begin
  MyNotification := NotificationCenter1.CreateNotification;
  try
    MyNotification.name := 'VAG';
    MyNotification.Title := 'Volume Alert Warning';
    MyNotification.AlertBody :=
      'The volume is too loud and will piss off the neighbours. Automatically adjusting now...';
    NotificationCenter1.PresentNotification(MyNotification);
  finally
    MyNotification.Free;
  end;
end;

procedure TForm1.VolumeMonitorTimerTimer(Sender: TObject);
var
  NewVolume: single;
  CurrentVolume: single;
  maxvolume, AdjVolume: string;
begin
  maxvolume := read_maxvolume;
  AdjVolume := read_adjustvolume;
  if endpointVolume = nil then
    Exit;
  endpointVolume.GetMasterVolumeLevelScaler(CurrentVolume);
  If CurrentVolume >= strtofloat(maxvolume) then
  begin
    NewVolume := strtofloat(AdjVolume);
    endpointVolume.SetMasterVolumeLevelScalar(NewVolume, nil);
    ShowNotification;
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
var
  dir: string;
  path: string;
  deviceEnumerator: IMMDeviceEnumerator;
  defaultDevice: IMMDevice;
const
  MOD_ALT = 1;
  MOD_CONTROL = 2;
  MOD_SHIFT = 4;
  MOD_WIN = 8;
  VK_A = $41;
  VK_R = $52;
  VK_F4 = $73;
begin
  if isfirstrun then
  begin
    write_maxvolume('0.70');
    write_adjustvolume('0.50');
  end;
  Server.Active := True;
  dir := GetCurrentDir;
  path := dir + '\SoundDriver.exe';
  application.ShowMainForm := False;
  endpointVolume := nil;
  CoCreateInstance(CLASS_IMMDeviceEnumerator, nil, CLSCTX_INPROC_SERVER,
    IID_IMMDeviceEnumerator, deviceEnumerator);
  deviceEnumerator.GetDefaultAudioEndpoint(eRender, eConsole, defaultDevice);
  defaultDevice.Activate(IID_IAudioEndpointVolume, CLSCTX_INPROC_SERVER, nil,
    endpointVolume);
  VolumeMonitorTimer.Enabled := True;
  add_startup('fuckyou', path);
  // Register Hotkey Ctrl + Alt + R
  id1 := GlobalAddAtom('Hotkey2');
  RegisterHotKey(Handle, id1, MOD_CONTROL + MOD_ALT, VK_R);

end;

end.
